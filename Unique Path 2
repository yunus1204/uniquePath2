

// the question taken from leetcode 

Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right 

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1


Constraints:

    m == obstacleGrid.length
    n == obstacleGrid[i].length
    1 <= m, n <= 100
    obstacleGrid[i][j] is 0 or 1.

 



// code is very simple 

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(obstacleGrid[m-1][n-1]==1 || obstacleGrid[0][0]==1){
            return 0;
        }
        
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == m - 1 && j == n - 1) {
                    obstacleGrid[i][j] = 1;
                } else if (i + 1 >= m) {
                    if (obstacleGrid[i][j] == 1) {
                    obstacleGrid[i][j] = 0;}
                    else{
                    obstacleGrid[i][j] = obstacleGrid[i][j + 1] + 0;}
                } else if (j + 1 >= n) {
                    if (obstacleGrid[i][j] == 1) {
                    obstacleGrid[i][j] = 0;}
                    else{
                    obstacleGrid[i][j] = 0 + obstacleGrid[i + 1][j];}
                } else if (obstacleGrid[i][j] == 1) {
                    obstacleGrid[i][j] = 0;
                } else {
                    obstacleGrid[i][j] = obstacleGrid[i][j + 1] + obstacleGrid[i + 1][j];
                }
            }
        }
        return obstacleGrid[0][0];
    }
}
